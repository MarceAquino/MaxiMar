// ======================================================================
// GESTI√ìN DE NOMBRE DE USUARIO - SIMPLE PARA ESTUDIANTES
// ======================================================================
// Este archivo maneja el nombre del usuario en diferentes p√°ginas
// Funciona tanto para mostrar bienvenidas como para login

// ======================================================================
// FUNCI√ìN PRINCIPAL: CONFIGURAR SISTEMA DE NOMBRES
// ======================================================================
/**
 * Configura el sistema de nombres de usuario en cualquier p√°gina
 * Maneja tanto el login como mostrar mensajes de bienvenida
 */
function configurarSistemaNombres () {
  console.log('üë§ Iniciando sistema de nombres de usuario...')

  // Elementos importantes de la p√°gina
  const formularioLogin = document.getElementById('loginForm')
  const campoNombreUsuario = document.getElementById('nombreUsuario')
  const mensajeBienvenida = document.getElementById('welcomeMessage')

  // Obtener usuario guardado
  const usuarioGuardado = localStorage.getItem('nombreUsuario')
  console.log(`üë§ Usuario guardado: ${usuarioGuardado || 'ninguno'}`)

  // ======================================================================
  // MOSTRAR MENSAJE DE BIENVENIDA
  // ======================================================================
  if (mensajeBienvenida && usuarioGuardado) {
    mensajeBienvenida.textContent = `¬°Hola, ${usuarioGuardado}!`
    console.log('üëã Mensaje de bienvenida mostrado')
  }

  // ======================================================================
  // CONFIGURAR FORMULARIO DE LOGIN (si existe)
  // ======================================================================
  if (!formularioLogin || !campoNombreUsuario) {
    console.log('‚ÑπÔ∏è No hay formulario de login en esta p√°gina')
    return // No es una p√°gina de login, salir
  }

  // Si ya hay usuario guardado y estamos en login, redirigir
  if (usuarioGuardado) {
    console.log('üîÑ Usuario ya logueado, redirigiendo...')
    window.location.href = '/front-end/html/customer/productos.html'
    return
  }

  // ======================================================================
  // EVENTO: PROCESAR FORMULARIO DE LOGIN
  // ======================================================================
  formularioLogin.addEventListener('submit', (evento) => {
    evento.preventDefault() // Evitar que la p√°gina se recargue

    const nombreIngresado = campoNombreUsuario.value.trim()
    console.log(`üë§ Intento de login: "${nombreIngresado}"`)

    // Validar longitud m√≠nima del nombre
    if (nombreIngresado.length >= 4) {
      console.log('‚úÖ Nombre v√°lido, guardando usuario')

      // Guardar nombre en localStorage
      localStorage.setItem('nombreUsuario', nombreIngresado)

      // Mostrar campo como v√°lido
      campoNombreUsuario.classList.add('is-valid')

      // Redirigir despu√©s de una pausa visual
      setTimeout(() => {
        console.log('üîÑ Redirigiendo a productos...')
        window.location.href = '/front-end/html/customer/productos.html'
      }, 300)
    } else {
      console.log('‚ùå Nombre muy corto, mostrando error')

      // Mostrar campo como inv√°lido
      campoNombreUsuario.classList.add('is-invalid')

      // Quitar error despu√©s de 3 segundos
      setTimeout(() => {
        campoNombreUsuario.classList.remove('is-invalid')
      }, 3000)
    }
  })

  // ======================================================================
  // EVENTO: LIMPIAR VALIDACI√ìN AL ESCRIBIR
  // ======================================================================
  campoNombreUsuario.addEventListener('input', function () {
    // Quitar clases de validaci√≥n para estado limpio
    this.classList.remove('is-valid', 'is-invalid')
  })
}

// ======================================================================
// INICIALIZAR CUANDO LA P√ÅGINA CARGA
// ======================================================================
configurarSistemaNombres()
